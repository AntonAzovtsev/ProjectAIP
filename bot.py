from aiogram.dispatcher.filters import Command

import config
import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from db import BotDB
BotDB = BotDB('bd.db')

"""–í—Å–µ —á—Ç–æ —Å logging - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
logging.basicConfig(level=logging.INFO)

"""–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞"""
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

"""–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à"""
"""–ù–ê–ß–ê–õ–û –í–°–ï–• –ö–õ–ê–í–ò–®–®–®"""
"""–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = KeyboardButton("/start")
button2 = KeyboardButton('/—Ä–µ—Ü–µ–ø—Ç—ã')
keyboard.add(button1).add(button2)


rev = InlineKeyboardMarkup(row_width=1)
item1 = KeyboardButton(text="–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="octav")
item2 = KeyboardButton(text="–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="posm")
item3 = KeyboardButton(text="–Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ —Ö–æ—á—É", callback_data="net")

rev.add(item1).add(item2).add(item3)

kakou1 = InlineKeyboardMarkup(row_width=5)
octav1 = KeyboardButton(text="1‚É£", callback_data="oct1")
octav2 = KeyboardButton(text="2‚É£", callback_data="oct2")
octav3 = KeyboardButton(text="3‚É£", callback_data="oct3")
octav4 = KeyboardButton(text="4‚É£", callback_data="oct4")
octav5 = KeyboardButton(text="5‚É£", callback_data="oct5")
kakou1.add(octav1, octav2, octav3, octav4, octav5)

kakou2 = InlineKeyboardMarkup(row_width=5)
prosm1 = KeyboardButton(text="1‚É£", callback_data="pos1")
prosm2 = KeyboardButton(text="2‚É£", callback_data="pos2")
prosm3 = KeyboardButton(text="3‚É£", callback_data="pos3")
prosm4 = KeyboardButton(text="4‚É£", callback_data="pos4")
prosm5 = KeyboardButton(text="5‚É£", callback_data="pos5")
kakou2.add(prosm1, prosm2, prosm3, prosm4, prosm5)

rec = InlineKeyboardMarkup(row_width=1)
pel = InlineKeyboardButton(text="–ü–µ–ª—å–º–µ–Ω–∏", callback_data="pelmen")
mak = InlineKeyboardButton(text="–ú–∞–∫–∞—Ä–æ–Ω—ã", callback_data="makaron")
rec.add(pel).add(mak)

"""–ö–û–ù–ï–¶ –í–°–ï–• –ö–õ–ê–í–ò–®–®–®"""


@dp.message_handler(Command("start"))
async def hello(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ /start"""
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç, —è –ë–æ—Ç-–ø–æ–≤–∞—Ä\n–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫—Ä–æ–º–µ –¥–æ—à–∏—Ä–∞–∫–∞",
                         reply_markup=keyboard)

@dp.message_handler(Command("—Ä–µ—Ü–µ–ø—Ç—ã"))
async def show_recept(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ /—Ä–µ—Ü–µ–ø—Ç—ã"""
    await message.answer(text="–£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã. \n"
                         "–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ", reply_markup=rec)

@dp.callback_query_handler(text="pelmen")
async def rec_pelm(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ —É –∫–æ—Ç–æ—Ä–æ–π call_back=pelmen"""
    await call.answer(cache_time=60)
    calll = call.data
    logging.info(f"call = {calll}")

    records = BotDB.get_recipe(calll)

    records = BotDB.get_recipe(calll)

    """–í—ã–≤–æ–¥ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    if (len(records) != 0):
        await call.message.answer("–ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –≤–æ—Ç —Ç–∞–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã:")
        for i in range(len(records)):
            x = records[i]
            print(records[i][3])
            print(x[3])
            await call.message.answer(records[i][3])
            i += 1
        await call.message.answer(text="–≠—Ç–æ –Ω–∞—à–∏ 5 –ª—É—á—à–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n" "—Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π "
                                       "–∫–∞–∫–æ–º—É-–Ω–∏–±—É–¥—å —Ä–µ—Ü–µ–ø—Ç—É?", reply_markup=rev)
    else:
        await call.message.answer("–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–ø—Ç–æ–≤ —Å –ø–µ–ª—å–º–µ–Ω—è–º–∏. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. \n""–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ")

    @dp.callback_query_handler(text="net")
    async def rev_net(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ —Ö–æ—á–µ—Ç –Ω–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã, –Ω–∏ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π"""
        await call.answer(cache_time=60)
        calll = call.data
        logging.info(f"call = {calll}")

        await call.message.answer("–ë—É–¥—É —Ä–∞–¥ —Ç–µ–±—è –µ—â–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—åü•∫üòÑ")

    @dp.callback_query_handler(text="octav")
    async def rev_ost(call: CallbackQuery):
        """–µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"""
        await call.answer(cache_time=60)
        calll = call.data
        logging.info(f"call = {calll}")

        await call.message.answer(text="–ö –∫–∞–∫–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π?", reply_markup=kakou1)

        @dp.callback_query_handler(text="oct1")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫ –ø–µ—Ä–≤–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):
                x = message.text
                y = records[0][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")


        @dp.callback_query_handler(text="oct2")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):
                x = message.text
                y = records[1][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")


        @dp.callback_query_handler(text="oct3")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫ —Ç—Ä–µ—Ç—å–µ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):
                x = message.text
                y = records[2][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")


        @dp.callback_query_handler(text="oct4")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):
                x = message.text
                y = records[3][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")

        @dp.callback_query_handler(text="oct5")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫ –ø—è—Ç–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):
                x = message.text
                y = records[4][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")


    @dp.callback_query_handler(text="posm")
    async def rev_pos(call: CallbackQuery):
        """–ù–µ–¥–æ–¥–µ–ª–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç—ã"""
        await call.answer(cache_time=60)
        calll = call.data
        logging.info(f"call = {calll}")

        await call.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –¥–æ–ø–∏–ª–∏–ª(( –ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!")
        """await call.message.answer(text="–ö –∫–∞–∫–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏?", reply_markup=kakou2)

        @dp.callback_query_handler(text="pos1")
        async def rev_pos(call: CallbackQuery):
            await call.answer(cache_time=60)
            calll = call.data
            logging.info(f"call = {calll}")

            await call.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –¥–æ–ø–∏–ª–∏–ª(( –ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!")
            call.message.answer(text="–ö –∫–∞–∫–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏?", reply_markup=kakou2)"""


@dp.callback_query_handler(text="makaron")
async def rec_mak(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ —É –∫–æ—Ç–æ—Ä–æ–π call_back=makaron"""
    await call.answer(cache_time=60)
    calll = call.data
    logging.info(f"call = {calll}")

    records = BotDB.get_recipe(calll)
    """–í—ã–≤–æ–¥ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    if (len(records) != 0):
        await call.message.answer("–ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –≤–æ—Ç —Ç–∞–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã:")
        for i in range(len(records)):
            x = records[i]
            print(records[i][3])
            print(x[3])
            await call.message.answer(records[i][3])
            i += 1
        await call.message.answer(text="–≠—Ç–æ –Ω–∞—à–∏ 5 –ª—É—á—à–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n" "—Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π "
                                       "–∫–∞–∫–æ–º—É-–Ω–∏–±—É–¥—å —Ä–µ—Ü–µ–ø—Ç—É?", reply_markup=rev)
    else:
        await call.message.answer("–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–ø—Ç–æ–≤ —Å –º–∞–∫–∞—Ä–æ–Ω–∞–º–∏. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. \n""–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ")

    @dp.callback_query_handler(text="net")
    async def rev_net(call: CallbackQuery):
        await call.answer(cache_time=60)
        calll = call.data
        logging.info(f"call = {calll}")

        await call.message.answer("–ë—É–¥—É —Ä–∞–¥ —Ç–µ–±—è –µ—â–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—åü•∫üòÑ")

    @dp.callback_query_handler(text="octav")
    async def rev_ost(call: CallbackQuery):
        await call.answer(cache_time=60)
        calll = call.data
        logging.info(f"call = {calll}")

        await call.message.answer(text="–ö –∫–∞–∫–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π?", reply_markup=kakou1)

        @dp.callback_query_handler(text="oct1")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫ –ø–µ—Ä–≤–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):

                x = message.text
                y = records[0][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")


        @dp.callback_query_handler(text="oct2")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):
                x = message.text
                y = records[1][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")


        @dp.callback_query_handler(text="oct3")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫ —Ç—Ä–µ—Ç—å–µ–º —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):
                x = message.text
                y = records[2][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")

        @dp.callback_query_handler(text="oct4")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):
                x = message.text
                y = records[3][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")

        @dp.callback_query_handler(text="oct5")
        async def rev_ost(call: CallbackQuery):
            """–û—Ç–∑—ã–≤ –∫ –ø—è—Ç–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
            await call.answer(cache_time=60)
            callback = call.data
            logging.info(f"call = {callback}")

            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")

            @dp.message_handler()
            async def obrab(message: types.Message):
                x = message.text
                y = records[4][1]
                print(x, '   ', y)
                BotDB.add_record(y, x)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")

    @dp.callback_query_handler(text="posm")
    async def rev_pos(call: CallbackQuery):
        """–ù–µ–¥–æ–¥–µ–ª–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç—ã"""
        await call.answer(cache_time=60)
        calll = call.data
        logging.info(f"call = {calll}")

        await call.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –¥–æ–ø–∏–ª–∏–ª(( –ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!")
        """await call.message.answer(text="–ö –∫–∞–∫–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏?", reply_markup=kakou2)

        @dp.callback_query_handler(text="pos1")
        async def rev_pos(call: CallbackQuery):
            await call.answer(cache_time=60)
            calll = call.data
            logging.info(f"call = {calll}")

            await call.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –¥–æ–ø–∏–ª–∏–ª(( –ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!")
            call.message.answer(text="–ö –∫–∞–∫–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏?", reply_markup=kakou2)"""


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)